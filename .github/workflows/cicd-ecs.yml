<<<<<<< HEAD
=======
# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

>>>>>>> 959f8e82e57503130a9837270b0109a370d0275d

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "master" ]

env:
  AWS_REGION: us-east-1               
<<<<<<< HEAD
  ECR_REPOSITORY: juiceshop_repo         
  ECS_SERVICE: juiceshop-service             
  ECS_CLUSTER: my-ecs-cluster               
=======
  ECR_REPOSITORY: juiceshop         
  ECS_SERVICE: juice-shop-svc               
  ECS_CLUSTER: juiceshop-cluster765                
>>>>>>> 959f8e82e57503130a9837270b0109a370d0275d
  ECS_TASK_DEFINITION: .aws/juiceshop-td234.json  
  CONTAINER_NAME: juiceShop        

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

<<<<<<< HEAD
    # SAST using SonarQube
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@v1
      with:
        projectBaseDir: ../../*
      env:
        SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONARQUBE_HOST }}


    # Configure AWS credentials
=======
>>>>>>> 959f8e82e57503130a9837270b0109a370d0275d
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

<<<<<<< HEAD
    # Login to Amazon ECR
=======
>>>>>>> 959f8e82e57503130a9837270b0109a370d0275d
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

<<<<<<< HEAD
    # Build, tag, and push image to Amazon ECR
=======
>>>>>>> 959f8e82e57503130a9837270b0109a370d0275d
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
<<<<<<< HEAD
=======
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
>>>>>>> 959f8e82e57503130a9837270b0109a370d0275d
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

<<<<<<< HEAD
    # Fill in the new image ID in the Amazon ECS task definition
=======
>>>>>>> 959f8e82e57503130a9837270b0109a370d0275d
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

<<<<<<< HEAD
    # Deploy Amazon ECS task definition!
=======
>>>>>>> 959f8e82e57503130a9837270b0109a370d0275d
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
<<<<<<< HEAD

    # DAST using OWASP ZAP
   # - name: Start OWASP ZAP Container
    #  run: |
     #   docker run -d --name zap -u zap -p 8080:8080 -v $(pwd):/zap/wrk owasp/zap2docker-stable zap-baseline.py -t http://<your-app-url> -r zap_report.html
    #- name: Generate OWASP ZAP Report
    #  run: docker cp zap:/zap/wrk/zap_report.html .
    #- name: Upload OWASP ZAP Report
     # uses: actions/upload-artifact@v3
      #with:
       # name: zap-report
        #path: zap_report.html
=======
>>>>>>> 959f8e82e57503130a9837270b0109a370d0275d
